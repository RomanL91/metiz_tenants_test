/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–º–µ—Ç—ã
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –∏ API –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */

(function () {
    'use strict';

    // ====== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ======
    const CONFIG = {
        // –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π –ø—É—Ç—å:
        // –í–∞—Ä–∏–∞–Ω—Ç 1: apiUrl: '/api/estimates/{estimate_id}/settings/',
        // –í–∞—Ä–∏–∞–Ω—Ç 2: apiUrl: '/api/v1/estimates/{estimate_id}/settings/',
        apiUrl: '/api/v1/estimates/{estimate_id}/settings/',
        estimateId: null, // –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    };

    // ====== DOM –≠–õ–ï–ú–ï–ù–¢–´ ======
    const elements = {
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è
        openBtn: document.getElementById('btn-estimate-settings'),

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal: document.getElementById('estimate-settings-modal'),
        modalClose: document.getElementById('modal-close'),
        modalCancel: document.getElementById('modal-cancel'),
        modalApply: document.getElementById('modal-apply'),

        // –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        objectName: document.getElementById('estimate-object-name'),
        vatRate: document.getElementById('estimate-vat-rate'),
    };

    // ====== –£–¢–ò–õ–ò–¢–´ ======

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Django
     */
    function getCsrfToken() {
        const input = document.querySelector('[name=csrfmiddlewaretoken]');
        if (input && input.value) return input.value;

        const match = document.cookie.match(/(?:^|;)\s*csrftoken=([^;]+)/);
        return match ? decodeURIComponent(match[1]) : '';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ URL API –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–º–µ—Ç—ã
     */
    function getApiUrl() {
        return CONFIG.apiUrl.replace('{estimate_id}', CONFIG.estimateId);
    }

    // ====== –†–ê–ë–û–¢–ê –° –ú–û–î–ê–õ–¨–ù–´–ú –û–ö–ù–û–ú ======

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    function openModal() {
        if (!elements.modal) return;

        elements.modal.classList.add('active');
        document.body.style.overflow = 'hidden';

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
        loadSettings();
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    function closeModal() {
        if (!elements.modal) return;

        elements.modal.classList.remove('active');
        document.body.style.overflow = '';
    }

    // ====== API –ó–ê–ü–†–û–°–´ ======

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ—Ç—ã
     */
    async function loadSettings() {
        const url = getApiUrl();
        console.log('üì° GET –∑–∞–ø—Ä–æ—Å:', url);

        try {
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCsrfToken(),
                },
                credentials: 'include',
            });

            console.log('üìä GET –æ—Ç–≤–µ—Ç:', response.status, response.statusText);

            if (!response.ok) {
                const text = await response.text();
                console.error('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', text.substring(0, 500));
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            if (data.settings_data) {
                if (elements.objectName && data.settings_data.object_name !== undefined) {
                    elements.objectName.value = data.settings_data.object_name || '';
                }

                if (elements.vatRate && data.settings_data.vat_rate !== undefined) {
                    elements.vatRate.value = data.settings_data.vat_rate || '';
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ—Ç—ã
     */
    async function saveSettings() {
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        if (elements.modalApply) {
            elements.modalApply.disabled = true;
            elements.modalApply.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
        }

        try {
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            const settings = {};

            if (elements.objectName) {
                const objectName = elements.objectName.value.trim();
                if (objectName) {
                    settings.object_name = objectName;
                }
            }

            if (elements.vatRate) {
                const vatRate = elements.vatRate.value.trim();
                if (vatRate) {
                    const vatRateNum = parseFloat(vatRate);
                    if (!isNaN(vatRateNum)) {
                        settings.vat_rate = vatRateNum;
                    }
                }
            }

            const payload = { settings_data: settings };
            const url = getApiUrl();

            console.log('üì° POST –∑–∞–ø—Ä–æ—Å:', url);
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', payload);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCsrfToken(),
                },
                credentials: 'include',
                body: JSON.stringify(payload),
            });

            console.log('üìä POST –æ—Ç–≤–µ—Ç:', response.status, response.statusText);

            if (!response.ok) {
                const text = await response.text();
                console.error('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', text.substring(0, 500));
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', data);

            // –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
            alert('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
            closeModal();

            // –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            document.dispatchEvent(new CustomEvent('estimate-settings-updated', {
                detail: { settings: data.settings_data }
            }));

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            window.location.reload();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
        } finally {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (elements.modalApply) {
                elements.modalApply.disabled = false;
                elements.modalApply.textContent = '–ü—Ä–∏–º–µ–Ω–∏—Ç—å';
            }
        }
    }

    // ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ======

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    function initEventHandlers() {
        // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (elements.openBtn) {
            elements.openBtn.addEventListener('click', openModal);
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (elements.modalClose) {
            elements.modalClose.addEventListener('click', closeModal);
        }

        if (elements.modalCancel) {
            elements.modalCancel.addEventListener('click', closeModal);
        }

        // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (elements.modal) {
            elements.modal.addEventListener('click', (e) => {
                if (e.target === elements.modal) {
                    closeModal();
                }
            });
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (elements.modalApply) {
            elements.modalApply.addEventListener('click', saveSettings);
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && elements.modal?.classList.contains('active')) {
                closeModal();
            }
        });

        // Enter –≤ –ø–æ–ª—è—Ö —Ñ–æ—Ä–º—ã - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        [elements.objectName, elements.vatRate].forEach(input => {
            if (input) {
                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' && elements.modal?.classList.contains('active')) {
                        e.preventDefault();
                        saveSettings();
                    }
                });
            }
        });
    }

    // ====== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     * @param {number|string} estimateId - ID —Ç–µ–∫—É—â–µ–π —Å–º–µ—Ç—ã
     */
    function init(estimateId) {
        if (!estimateId) {
            console.error('Estimate ID –Ω–µ —É–∫–∞–∑–∞–Ω');
            return;
        }

        CONFIG.estimateId = estimateId;
        initEventHandlers();

        console.log('‚úÖ –ú–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (ID:', estimateId + ')');
        console.log('üìç API URL:', getApiUrl());
    }

    // ====== –ü–£–ë–õ–ò–ß–ù–´–ô API ======

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    window.EstimateSettings = {
        init: init,
        open: openModal,
        close: closeModal,
        load: loadSettings,
        save: saveSettings,
        getApiUrl: getApiUrl, // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    };

})();