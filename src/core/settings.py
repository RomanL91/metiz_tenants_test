"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-p777z(q@8*(3pvh+et&!b%xk==qm@%$b1o%r&ld9&!e#(e=p9@"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# ===========================================================================
# МОИ НАСТРОКИ ==============================================================
# ===========================================================================
import os


def env(name, default=None, cast=str):
    v = os.environ.get(name, default)
    if cast is int and v is not None:
        try:
            return int(v)
        except ValueError:
            return default
    return v


# DATABASES ================================================================
DATABASES = {
    "default": {
        "ENGINE": "django_tenants.postgresql_backend",  # важно!
        "NAME": env("POSTGRES_DB", "MyMetizBD"),
        "USER": env("POSTGRES_USER", "MyMetizUser"),
        "PASSWORD": env("POSTGRES_PASSWORD", "MyMetizPassword"),
        "HOST": env("POSTGRES_HOST", "localhost"),
        "PORT": env("POSTGRES_PORT", 3333, cast=int),
        "CONN_MAX_AGE": env("DB_CONN_MAX_AGE", 60, cast=int),
    }
}

# Роутер миграций shared/tenant
DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)

# DATABASES ============================================================= END

# INSTALLED_APPS ============================================================
# Приложения, которые будут синхронизированы с общей схемой
# Разделяем приложения
SHARED_APPS = [
    "django_tenants",
    "django.contrib.contenttypes",
    "django.contrib.auth",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.admin",
    "django.contrib.staticfiles",
    "app_tenants",  # где лежат Tenant/Domain
    "app_users",  # где лежит кастомная User-модель
]

TENANT_APPS = [
    "django.contrib.contenttypes",
    "django.contrib.auth",  # изолированный auth арендатора
    "app_users",  # изолированная копия таблиц пользователя
    "app_outlay",
]

INSTALLED_APPS = list(
    dict.fromkeys(SHARED_APPS + [a for a in TENANT_APPS if a not in SHARED_APPS])
)

# INSTALLED_APPS ======================================================== END

# MIDDLEWARE ================================================================

MIDDLEWARE = [
    "django_tenants.middleware.main.TenantMainMiddleware",  # долно стоять первым
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
# MIDDLEWARE ============================================================ END

# django-tenants ============================================================
BASE_DOMAIN = "localhost"
PUBLIC_SCHEMA_NAME = "public"
AUTH_USER_MODEL = "app_users.User"
TENANT_MODEL = "app_tenants.Tenant"
TENANT_DOMAIN_MODEL = "app_tenants.Domain"
# TENANT_USERS_DOMAIN = BASE_DOMAIN
# AUTHENTICATION_BACKENDS = [
#     "tenant_users.permissions.backend.UserBackend",
# ]
PUBLIC_SCHEMA_URLCONF = "core.urls_public"
ROOT_URLCONF = "core.urls"
# django-tenants ======================================================== END


ALLOWED_HOSTS = ["localhost", ".localhost"]
# STATICFILES_DIRS = [BASE_DIR / "static"]  # твои исходники статики (опц.)

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"


# ===========================================================================
# ===========================================================================
# ===========================================================================
