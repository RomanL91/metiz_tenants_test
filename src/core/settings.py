"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-p777z(q@8*(3pvh+et&!b%xk==qm@%$b1o%r&ld9&!e#(e=p9@"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# ===========================================================================
# МОИ НАСТРОКИ ==============================================================
# ===========================================================================
import os


# DEBUG = os.getenv("DJANGO_DEBUG", "0") == "1"
DEBUG = True


def env(name, default=None, cast=str):
    v = os.environ.get(name, default)
    if cast is int and v is not None:
        try:
            return int(v)
        except ValueError:
            return default
    return v


# DATABASES ================================================================
DATABASES = {
    "default": {
        "ENGINE": "django_tenants.postgresql_backend",  # важно!
        "NAME": env("POSTGRES_DB", "MyMetizBD"),
        "USER": env("POSTGRES_USER", "MyMetizUser"),
        "PASSWORD": env("POSTGRES_PASSWORD", "MyMetizPassword"),
        "HOST": env("POSTGRES_HOST", "localhost"),
        "PORT": env("POSTGRES_PORT", 3333, cast=int),
        "CONN_MAX_AGE": env("DB_CONN_MAX_AGE", 60, cast=int),
    }
}

# Роутер миграций shared/tenant
DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)

# DATABASES ============================================================= END

# INSTALLED_APPS ============================================================
# Приложения, которые будут синхронизированы с общей схемой
# Разделяем приложения
SHARED_APPS = [
    "django_tenants",  # ядро мульти-аренды
    "django.contrib.contenttypes",  # нужен в public (и в tenant), допускается в обоих списках
    "django.contrib.staticfiles",  # статика для публичной зоны (опционально)
    "app_tenants",
    "nested_admin",
    "rest_framework",
]

TENANT_APPS = [
    "django.contrib.contenttypes",
    "django.contrib.auth",  # изолированные пользователи/группы/permissions
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.admin",  # админка внутри каждого арендатора
    "app_users",  # кастомная пользовательская модель (AUTH_USER_MODEL указывает сюда)
    "app_outlay",
    "app_technical_cards",
    "app_materials",
    "app_works",
    "app_estimate_imports",
    "app_overhead_costs",
    "app_suppliers",
    "app_units",
]

INSTALLED_APPS = list(
    dict.fromkeys(SHARED_APPS + [a for a in TENANT_APPS if a not in SHARED_APPS])
)

# INSTALLED_APPS ======================================================== END

# MIDDLEWARE ================================================================

MIDDLEWARE = [
    "django_tenants.middleware.main.TenantMainMiddleware",  # долно стоять первым
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.locale.LocaleMiddleware",  # Locale
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
# MIDDLEWARE ============================================================ END

# django-tenants ============================================================
BASE_DOMAIN = "localhost"
PUBLIC_SCHEMA_NAME = "public"
AUTH_USER_MODEL = "app_users.User"
TENANT_MODEL = "app_tenants.Tenant"
TENANT_DOMAIN_MODEL = "app_tenants.Domain"
# TENANT_USERS_DOMAIN = BASE_DOMAIN
# AUTHENTICATION_BACKENDS = [
#     "tenant_users.permissions.backend.UserBackend",
# ]
PUBLIC_SCHEMA_URLCONF = "core.urls_public"
ROOT_URLCONF = "core.urls"
# django-tenants ======================================================== END


ALLOWED_HOSTS = ["91.199.149.128", ".sslip.io", "localhost", "127.0.0.1", ".localhost"]
CSRF_TRUSTED_ORIGINS = ["http://*.91-199-149-128.sslip.io", "http://91.199.149.128"]
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False
SECURE_SSL_REDIRECT = False
SECURE_HSTS_SECONDS = 0
STATICFILES_DIRS = [
    BASE_DIR / "static",  # /app/src/static
    (BASE_DIR.parent / "static"),  # /app/static  (корневой static за пределами src)
]

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "app_estimate_imports": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
    },
}


# Базовая настройка i18n =====================================================
from django.utils.translation import gettext_lazy as _

LANGUAGE_CODE = "ru"
TIME_ZONE = "Asia/Almaty"
USE_I18N = True
USE_TZ = True

# Перечень доступных языков
LANGUAGES = (
    ("ru", _("Русский")),
    ("en", _("Английский")),
    # при необходимости добавите другие
)
# Где храним свои .po/.mo (переводы проекта)
# Путь указываем к директории, которую вы будете коммитить
LOCALE_PATHS = [os.path.join(BASE_DIR, "locale")]

# Тонкая настройка чисел/дат (опционально)
USE_THOUSAND_SEPARATOR = True
THOUSAND_SEPARATOR = " "
DECIMAL_SEPARATOR = ","
# Базовая настройка i18n ================================================= END


# Настройки DRF =====================================================
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        # Можно добавить TokenAuthentication или JWTAuthentication
    ],
}
# Настройки DRF ===================================================== END


class CustomAdminSite:
    site_header = _("ERP - METISone")
    site_title = _("Умные ERP-модули для строительства")
    index_title = _("Умные ERP-модули для строительства")
