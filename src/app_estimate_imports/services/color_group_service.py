"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ —è—á–µ–µ–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ NAME_OF_WORK –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç
–∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä—É–ø–ø/–ø–æ–¥–≥—Ä—É–ø–ø –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.

–ê–ª–≥–æ—Ä–∏—Ç–º:
---------
1. –°—Ç—Ä–æ–∫–∞ —Å —Ü–≤–µ—Ç–æ–º + –ø—É—Å—Ç—ã–µ UNIT/QTY = –Ω–∞—á–∞–ª–æ –≥—Ä—É–ø–ø—ã/–ø–æ–¥–≥—Ä—É–ø–ø—ã
2. –ò–º—è –≥—Ä—É–ø–ø—ã = —Ç–µ–∫—Å—Ç –∏–∑ —è—á–µ–π–∫–∏ NAME_OF_WORK
3. –ö–æ–Ω–µ—Ü –≥—Ä—É–ø–ø—ã = —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ —Ü–≤–µ—Ç–æ–º (–∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞)
4. –ù–æ–≤—ã–π —Ü–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã = –≤–ª–æ–∂–µ–Ω–Ω–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞ (level+1, parent=—Ç–µ–∫—É—â–∞—è)
5. –°—Ç–µ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é

–ü—Ä–∏–º–µ—Ä:
-------
–°—Ç—Ä–æ–∫–∞ 0: üîµ "–†–∞–∑–¥–µ–ª 1"       ‚Üí –ì—Ä—É–ø–ø–∞1, level=0, rows=[0-4]
–°—Ç—Ä–æ–∫–∞ 1:    "–†–∞–±–æ—Ç–∞ 1"       ‚Üí –≤–Ω—É—Ç—Ä–∏ –ì—Ä—É–ø–ø–∞1
–°—Ç—Ä–æ–∫–∞ 2:    "–†–∞–±–æ—Ç–∞ 2"       ‚Üí –≤–Ω—É—Ç—Ä–∏ –ì—Ä—É–ø–ø–∞1
–°—Ç—Ä–æ–∫–∞ 3: üü¢ "–ü–æ–¥—Ä–∞–∑–¥–µ–ª 1.1"  ‚Üí –ì—Ä—É–ø–ø–∞2, level=1, parent=–ì—Ä—É–ø–ø–∞1, rows=[3-4]
–°—Ç—Ä–æ–∫–∞ 4:    "–†–∞–±–æ—Ç–∞ 3"       ‚Üí –≤–Ω—É—Ç—Ä–∏ –ì—Ä—É–ø–ø–∞1 –ò –ì—Ä—É–ø–ø–∞2
–°—Ç—Ä–æ–∫–∞ 5: üîµ "–†–∞–∑–¥–µ–ª 2"       ‚Üí –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ì—Ä—É–ø–ø–∞1(0-4) –∏ –ì—Ä—É–ø–ø–∞2(3-4), –Ω–æ–≤–∞—è –ì—Ä—É–ø–ø–∞3
"""

import logging
import secrets
from typing import Dict, List, Optional, Tuple

from app_estimate_imports.services.base_service import BaseService
from app_estimate_imports.services.group_service import GroupService

logger = logging.getLogger(__name__)


class ColorGroupService(BaseService):
    """–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ —Ü–≤–µ—Ç–∞–º"""

    def __init__(self):
        super().__init__()
        self.group_service = GroupService()

    def analyze_colors_and_create_groups(
        self,
        markup,
        sheet_index: int,
        name_of_work_col_index: int,
        warn_if_groups_exist: bool = True,
    ) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –∏ —Å–æ–∑–¥–∞—ë—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä—É–ø–ø.

        Args:
            markup: –û–±—ä–µ–∫—Ç ParseMarkup —Å annotation
            sheet_index: –ò–Ω–¥–µ–∫—Å –ª–∏—Å—Ç–∞ Excel (0-based)
            name_of_work_col_index: –ò–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ NAME_OF_WORK
            warn_if_groups_exist: –ï—Å–ª–∏ True, —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≥—Ä—É–ø–ø

        Returns:
            {
                "ok": bool,
                "groups_created": int,
                "had_existing_groups": bool,
                "requires_confirmation": bool (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ),
                "error": str (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            }
        """
        try:
            logger.info("=" * 80)
            logger.info(
                f"üîç –ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–ó–ê | –õ–∏—Å—Ç: {sheet_index}, –ö–æ–ª–æ–Ω–∫–∞ NAME_OF_WORK: {name_of_work_col_index}"
            )
            logger.info("=" * 80)

            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø
            existing_groups = self.group_service.load_groups(markup, sheet_index)
            if existing_groups and warn_if_groups_exist:
                logger.warning(
                    f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(existing_groups)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
                )
                return {
                    "ok": False,
                    "requires_confirmation": True,
                    "had_existing_groups": True,
                    "error": f"–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø: {len(existing_groups)}",
                }

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä—É–ø–ø—ã –µ—Å–ª–∏ force=True (warn_if_groups_exist=False)
            had_existing = len(existing_groups) > 0
            if existing_groups and not warn_if_groups_exist:
                logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º {len(existing_groups)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø")
                self._clear_all_groups(markup, sheet_index)

            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞
            parse_result = markup.parse_result
            if not parse_result or not parse_result.data:
                return {"ok": False, "error": "ParseResult –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö"}

            sheets = parse_result.data.get("sheets", [])
            if sheet_index >= len(sheets):
                return {"ok": False, "error": f"–õ–∏—Å—Ç {sheet_index} –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            sheet = sheets[sheet_index]
            rows = sheet.get("rows", [])

            if not rows:
                return {
                    "ok": True,
                    "groups_created": 0,
                    "had_existing_groups": had_existing,
                }

            logger.info(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ: {len(rows)}")

            # 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ UNIT –∏ QTY –∏–∑ —Å—Ö–µ–º—ã
            unit_cols, qty_cols = self._get_validation_columns(markup, sheet_index)
            logger.info(f"üìã –ö–æ–ª–æ–Ω–∫–∏ UNIT: {unit_cols}, –∫–æ–ª–æ–Ω–∫–∏ QTY: {qty_cols}")

            # 4. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä—É–ø–ø
            groups_to_create = self._analyze_rows_and_build_groups(
                rows=rows,
                name_col=name_of_work_col_index,
                unit_cols=unit_cols,
                qty_cols=qty_cols,
            )

            if not groups_to_create:
                logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π")
                self.add_warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π")
                return {
                    "ok": True,
                    "groups_created": 0,
                    "had_existing_groups": had_existing,
                }

            logger.info(f"\n‚úÖ –ì–û–¢–û–í–û –ö –°–û–ó–î–ê–ù–ò–Æ: {len(groups_to_create)} –≥—Ä—É–ø–ø")
            self._log_groups_structure(groups_to_create)

            # 5. –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ GroupService
            created_count = self._create_groups_in_markup(
                markup=markup,
                sheet_index=sheet_index,
                groups_to_create=groups_to_create,
            )

            logger.info(f"\nüéâ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–û: {created_count} –≥—Ä—É–ø–ø")
            logger.info("=" * 80)

            return {
                "ok": True,
                "groups_created": created_count,
                "had_existing_groups": had_existing,
            }

        except Exception as e:
            logger.exception(f"üí• –û–®–ò–ë–ö–ê: {str(e)}")
            self.add_error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤: {str(e)}")
            return {"ok": False, "error": str(e)}

    def _get_validation_columns(
        self, markup, sheet_index: int
    ) -> Tuple[List[int], List[int]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ UNIT –∏ QTY –∏–∑ —Å—Ö–µ–º—ã.

        –≠—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –µ—Å–ª–∏ —É —Å—Ç—Ä–æ–∫–∏ –µ—Å—Ç—å —Ü–≤–µ—Ç,
        –Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã UNIT/QTY ‚Äî —ç—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞, –∞ —Ä–∞–±–æ—Ç–∞/–¢–ö.
        """
        annotation = markup.annotation or {}
        schema = annotation.get("schema", {})
        sheets = schema.get("sheets", {})
        sheet_config = sheets.get(str(sheet_index), {})
        col_roles = sheet_config.get("col_roles", [])

        unit_cols = [i for i, role in enumerate(col_roles) if role == "UNIT"]
        qty_cols = [i for i, role in enumerate(col_roles) if role == "QTY"]

        return unit_cols, qty_cols

    def _normalize_color(self, color: Optional[str]) -> Optional[str]:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ü–≤–µ—Ç –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É #RRGGBB.

        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
        - None/–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Üí None
        - #RRGGBB ‚Üí #RRGGBB (uppercase)
        - RRGGBB ‚Üí #RRGGBB
        - #RGB ‚Üí #RRGGBB (—É–¥–≤–æ–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤)
        """
        if not color:
            return None

        color = color.strip().upper()

        # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
        if color.startswith("#"):
            color = color[1:]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        if len(color) == 6 and all(c in "0123456789ABCDEF" for c in color):
            return f"#{color}"
        elif len(color) == 3 and all(c in "0123456789ABCDEF" for c in color):
            # #RGB ‚Üí #RRGGBB
            return f"#{color[0]}{color[0]}{color[1]}{color[1]}{color[2]}{color[2]}"

        return None

    def _analyze_rows_and_build_groups(
        self,
        rows: List[Dict],
        name_col: int,
        unit_cols: List[int],
        qty_cols: List[int],
    ) -> List[Dict]:
        """
        –ì–ª–∞–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä—É–ø–ø.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–µ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏:
        - –ù–æ–≤—ã–π —Ü–≤–µ—Ç = –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        - –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ü–≤–µ—Ç = –∑–∞–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø –∏ –Ω–∞—á–∞–ª–æ –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ
        - –°—Ç—Ä–æ–∫–∞ –±–µ–∑ —Ü–≤–µ—Ç–∞ = —Ä–∞–±–æ—Ç–∞, –≤—Ö–æ–¥–∏—Ç –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–∞—Ö (–≥–æ—Ç–æ–≤—ã—Ö –∫ —Å–æ–∑–¥–∞–Ω–∏—é)
        """
        completed_groups = []  # –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
        active_stack = []  # –°—Ç–µ–∫: [{group_data, color, start_row, row_index}]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        total_colored_rows = 0
        filtered_by_unit_qty = 0
        skipped_headers = 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)
        data_start_idx = self._find_data_start(rows, name_col, unit_cols, qty_cols)
        logger.info(
            f"üîç –ù–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º: {data_start_idx}"
        )

        logger.info("\n" + "=" * 80)
        logger.info("üìù –ê–ù–ê–õ–ò–ó –°–¢–†–û–ö (–¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö 20 —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)")
        logger.info("=" * 80)

        for row_idx, row_data in enumerate(rows):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∏
            if row_idx < data_start_idx:
                skipped_headers += 1
                if row_idx < 10:
                    logger.info(
                        f"\n–°—Ç—Ä–æ–∫–∞ {row_data.get('row_index', row_idx + 1):3d} (idx={row_idx}): "
                        f"–ü–†–û–ü–£–©–ï–ù–ê (–∑–∞–≥–æ–ª–æ–≤–æ–∫)"
                    )
                continue

            cells = row_data.get("cells", [])
            colors = row_data.get("colors", [])

            # –í–ê–ñ–ù–û: row_index –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç row_idx)
            # –í grid.html –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è r.row_index, –∞ –Ω–µ –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ
            actual_row_index = row_data.get("row_index", row_idx + 1)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
            name = self._get_cell_value(cells, name_col)
            raw_color = self._get_cell_value(colors, name_col)
            color = self._normalize_color(raw_color)

            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è UNIT –∏ QTY –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            unit_values = [self._get_cell_value(cells, c) for c in unit_cols]
            qty_values = [self._get_cell_value(cells, c) for c in qty_cols]

            # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ UNIT/QTY: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, None, –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã = –ø—É—Å—Ç–æ
            has_unit = self._has_meaningful_value_in_columns(cells, unit_cols)
            has_qty = self._has_meaningful_value_in_columns(cells, qty_cols)

            # –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –ø–µ—Ä–≤—ã—Ö 20 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
            if row_idx < data_start_idx + 20:
                name_short = (
                    (name[:40] + "...") if name and len(name) > 40 else (name or "")
                )
                stack_repr = self._format_stack(active_stack)

                logger.info(f"\n–°—Ç—Ä–æ–∫–∞ {actual_row_index:3d} (idx={row_idx}):")
                logger.info(f"  üìù –ù–∞–∑–≤–∞–Ω–∏–µ: '{name_short}'")
                logger.info(f"  üé® –¶–≤–µ—Ç: {raw_color} ‚Üí {color or '–Ω–µ—Ç'}")
                logger.info(
                    f"  üìè UNIT: {unit_values} ‚Üí {'–ï–°–¢–¨' if has_unit else '–Ω–µ—Ç'}"
                )
                logger.info(f"  üî¢ QTY:  {qty_values} ‚Üí {'–ï–°–¢–¨' if has_qty else '–Ω–µ—Ç'}")
                logger.info(f"  üìö –°—Ç–µ–∫: {len(active_stack)} —É—Ä–æ–≤–Ω–µ–π {stack_repr}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ –Ω–∞—á–∞–ª–æ –≥—Ä—É–ø–ø—ã?
            if color:
                total_colored_rows += 1

                if has_unit or has_qty:
                    filtered_by_unit_qty += 1
                    if row_idx < data_start_idx + 20:
                        logger.info(f"  ‚ö†Ô∏è –ü–†–û–ü–£–©–ï–ù–û: –∏–º–µ–µ—Ç UNIT/QTY ‚Üí –Ω–µ –≥—Ä—É–ø–ø–∞")
                    continue

                # –≠—Ç–æ –≥—Ä—É–ø–ø–∞!
                if row_idx < data_start_idx + 20:
                    logger.info(f"  ‚úÖ –≠–¢–û –ì–†–£–ü–ü–ê!")

                level_to_close = self._find_group_level_by_color(active_stack, color)

                if level_to_close is not None:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Å —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –≥–ª—É–±–∂–µ
                    if row_idx < data_start_idx + 20:
                        logger.info(f"  üîÑ –ó–∞–∫—Ä—ã–≤–∞—é –≥—Ä—É–ø–ø—ã —Å —É—Ä–æ–≤–Ω—è {level_to_close}")

                    closed = self._close_groups_from_level(
                        active_stack, level_to_close, actual_row_index - 1
                    )

                    for closed_group in closed:
                        if row_idx < data_start_idx + 20:
                            logger.info(
                                f"     üì¶ –ó–∞–∫—Ä—ã—Ç–∞: '{closed_group['name'][:30]}' "
                                f"[{closed_group['rows'][0][0]}-{closed_group['rows'][0][1]}] "
                                f"level={closed_group['level']}"
                            )

                    completed_groups.extend(closed)

                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                level = len(active_stack)
                parent_uid = (
                    active_stack[-1]["group_data"]["uid"] if active_stack else None
                )
                parent_name = (
                    active_stack[-1]["group_data"]["name"] if active_stack else None
                )

                group_data = {
                    "uid": "grp_" + secrets.token_hex(8),
                    "name": (name or f"–ì—Ä—É–ø–ø–∞ {actual_row_index}").strip(),
                    "color": color,
                    "rows": [],  # –ó–∞–ø–æ–ª–Ω–∏–º –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≥—Ä—É–ø–ø—ã
                    "parent_uid": parent_uid,
                    "level": level,
                }

                if row_idx < data_start_idx + 20:
                    logger.info(f"  ‚ûï –û–¢–ö–†–´–¢–ê –ì–†–£–ü–ü–ê:")
                    logger.info(f"     –ù–∞–∑–≤–∞–Ω–∏–µ: '{group_data['name'][:40]}'")
                    logger.info(f"     –¶–≤–µ—Ç: {color}")
                    logger.info(f"     Level: {level}")
                    logger.info(
                        f"     –†–æ–¥–∏—Ç–µ–ª—å: {parent_name[:30] if parent_name else '–ù–ï–¢'}"
                    )

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫
                active_stack.append(
                    {
                        "group_data": group_data,
                        "color": color,
                        "start_row": actual_row_index,
                        "row_index": actual_row_index,
                    }
                )

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–µ –≥—Ä—É–ø–ø—ã
        if active_stack:
            last_row = rows[-1].get("row_index", len(rows))
            logger.info(
                f"\nüîö –ó–∞–∫—Ä—ã–≤–∞—é –æ—Å—Ç–∞–≤—à–∏–µ—Å—è {len(active_stack)} –≥—Ä—É–ø–ø –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ (—Å—Ç—Ä–æ–∫–∞ {last_row})"
            )

            closed = self._close_groups_from_level(active_stack, 0, last_row)

            for closed_group in closed:
                logger.info(
                    f"  üì¶ –ó–∞–∫—Ä—ã—Ç–∞: '{closed_group['name'][:40]}' "
                    f"[{closed_group['rows'][0][0]}-{closed_group['rows'][0][1]}] "
                    f"level={closed_group['level']}"
                )

            completed_groups.extend(closed)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("\n" + "=" * 80)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê")
        logger.info("=" * 80)
        logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {skipped_headers}")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(rows) - skipped_headers}")
        logger.info(f"–°—Ç—Ä–æ–∫ —Å —Ü–≤–µ—Ç–æ–º: {total_colored_rows}")
        logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ (–∏–º–µ—é—Ç UNIT/QTY): {filtered_by_unit_qty}")
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {len(completed_groups)}")

        if completed_groups:
            unique_colors = set(g["color"] for g in completed_groups)
            logger.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞: {', '.join(sorted(unique_colors))}")

        return completed_groups

    def _find_data_start(
        self, rows: List[Dict], name_col: int, unit_cols: List[int], qty_cols: List[int]
    ) -> int:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤).

        –õ–æ–≥–∏–∫–∞:
        1. –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫ (—Å–æ–¥–µ—Ä–∂–∏—Ç "–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï", "–ï–î.–ò–ó–ú", "–ö–û–õ-–í–û")
        2. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ —ç—Ç–æ–π –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        3. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—â—ë –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø. –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        header_keywords = ["–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï", "–ï–î.–ò–ó–ú", "–ö–û–õ-–í–û", "–®–ò–§–†", "–ü.–ü"]

        for row_idx, row_data in enumerate(rows):
            cells = row_data.get("cells", [])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            name_value = self._get_cell_value(cells, name_col)
            unit_value = self._get_cell_value(cells, unit_cols[0]) if unit_cols else ""
            qty_value = self._get_cell_value(cells, qty_cols[0]) if qty_cols else ""

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            all_text = " ".join(
                filter(None, [name_value or "", unit_value or "", qty_value or ""])
            ).upper()

            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            if any(keyword in all_text for keyword in header_keywords):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                # –û–±—ã—á–Ω–æ: —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ + 1 —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏/–¥–æ–ø.–∏–Ω—Ñ–æ + –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
                return min(row_idx + 2, len(rows))

        # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        return 0

    def _find_group_level_by_color(
        self, active_stack: List[Dict], color: str
    ) -> Optional[int]:
        """
        –ò—â–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º –≤ —Å—Ç–µ–∫–µ.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —É—Ä–æ–≤–Ω—è –∏–ª–∏ None, –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        for idx, stack_item in enumerate(active_stack):
            if stack_item["color"] == color:
                return idx
        return None

    def _close_groups_from_level(
        self, active_stack: List[Dict], level: int, end_row: int
    ) -> List[Dict]:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.

        –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω rows.

        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø (–≥–æ—Ç–æ–≤—ã—Ö –∫ —Å–æ–∑–¥–∞–Ω–∏—é)
        """
        closed_groups = []

        while len(active_stack) > level:
            stack_item = active_stack.pop()
            group_data = stack_item["group_data"]
            start_row = stack_item["start_row"]

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω [start, end]
            group_data["rows"] = [[start_row, end_row]]

            closed_groups.append(group_data)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—á—Ç–æ–±—ã —Ä–æ–¥–∏—Ç–µ–ª–∏ –±—ã–ª–∏ —Ä–∞–Ω—å—à–µ –ø–æ—Ç–æ–º–∫–æ–≤)
        return list(reversed(closed_groups))

    def _create_groups_in_markup(
        self, markup, sheet_index: int, groups_to_create: List[Dict]
    ) -> int:
        """
        –°–æ–∑–¥–∞—ë—Ç –≥—Ä—É–ø–ø—ã –≤ —Ä–∞–∑–º–µ—Ç–∫–µ —á–µ—Ä–µ–∑ GroupService.

        –í–∞–∂–Ω–æ: —Å–æ–∑–¥–∞—ë–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ —Ä–æ–¥–∏—Ç–µ–ª–∏, –ø–æ—Ç–æ–º –ø–æ—Ç–æ–º–∫–∏),
        —á—Ç–æ–±—ã parent_uid —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –∫ –º–æ–º–µ–Ω—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—á–µ—Ä–Ω–µ–π –≥—Ä—É–ø–ø—ã.
        """
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é (level), —á—Ç–æ–±—ã —Ä–æ–¥–∏—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å —Ä–∞–Ω—å—à–µ
        sorted_groups = sorted(groups_to_create, key=lambda g: g["level"])

        logger.info("\n" + "=" * 80)
        logger.info("üíæ –°–û–ó–î–ê–ù–ò–ï –ì–†–£–ü–ü –í –ë–î")
        logger.info("=" * 80)

        created_count = 0
        uid_mapping = {}  # –í—Ä–µ–º–µ–Ω–Ω—ã–π uid ‚Üí —Ä–µ–∞–ª—å–Ω—ã–π uid –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è

        for group_data in sorted_groups:
            try:
                # –ó–∞–º–µ–Ω—è–µ–º parent_uid –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π (–µ—Å–ª–∏ –±—ã–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π)
                parent_uid = group_data["parent_uid"]
                if parent_uid and parent_uid in uid_mapping:
                    parent_uid = uid_mapping[parent_uid]

                logger.info(
                    f"\n‚ûï –°–æ–∑–¥–∞—é: '{group_data['name'][:40]}' "
                    f"| level={group_data['level']} | rows={group_data['rows']}"
                )

                # –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É
                created_group = self.group_service.create_group(
                    markup=markup,
                    sheet_index=sheet_index,
                    name=group_data["name"],
                    rows=group_data["rows"],
                    parent_uid=parent_uid,
                    color=group_data["color"],
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ uid ‚Üí —Ä–µ–∞–ª—å–Ω–æ–≥–æ
                uid_mapping[group_data["uid"]] = created_group["uid"]

                created_count += 1
                logger.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å uid: {created_group['uid']}")

            except Exception as e:
                logger.error(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
                self.add_warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É '{group_data['name']}': {str(e)}"
                )
                continue

        return created_count

    def _clear_all_groups(self, markup, sheet_index: int):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –ª–∏—Å—Ç–µ"""
        groups = self.group_service.load_groups(markup, sheet_index)

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ uid –≥—Ä—É–ø–ø –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è)
        root_groups = [g for g in groups if not g.get("parent_uid")]

        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã (delete_group —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª–∏—Ç –ø–æ—Ç–æ–º–∫–æ–≤)
        for group in root_groups:
            try:
                self.group_service.delete_group(markup, sheet_index, group["uid"])
            except Exception as e:
                self.add_warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group['name']}: {str(e)}")

    # === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===

    def _get_cell_value(self, array: List, index: int) -> Optional[str]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if index < 0 or index >= len(array):
            return None
        value = array[index]
        return value.strip() if isinstance(value, str) and value else value

    def _has_meaningful_value_in_columns(
        self, cells: List, col_indices: List[int]
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ó–ù–ê–ß–ò–ú–û–ï –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö.

        –ó–Ω–∞—á–∏–º–æ–µ = –Ω–µ None, –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã.
        """
        for col_idx in col_indices:
            value = self._get_cell_value(cells, col_idx)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –Ω–µ None –ò –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ strip
            if value and len(value.strip()) > 0:
                return True
        return False

    def _format_stack(self, stack: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥"""
        if not stack:
            return "[–ø—É—Å—Ç–æ]"
        return (
            "["
            + ", ".join(
                f"{item['color'][:7]}:{item['group_data']['name'][:15]}"
                for item in stack
            )
            + "]"
        )

    def _log_groups_structure(self, groups: List[Dict]):
        """–í—ã–≤–æ–¥–∏—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä—É–ø–ø"""
        logger.info("\nüìÇ –°–¢–†–£–ö–¢–£–†–ê –ì–†–£–ü–ü:")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ parent_uid
        by_parent = {}
        for g in groups:
            parent = g.get("parent_uid") or "root"
            if parent not in by_parent:
                by_parent[parent] = []
            by_parent[parent].append(g)

        def print_tree(parent_uid, indent=0):
            children = by_parent.get(parent_uid, [])
            for child in children:
                logger.info(
                    f"{'  ' * indent}‚îú‚îÄ {child['name'][:40]} "
                    f"[{child['rows'][0][0]}-{child['rows'][0][1]}] "
                    f"({child['color']})"
                )
                print_tree(child["uid"], indent + 1)

        print_tree("root")
